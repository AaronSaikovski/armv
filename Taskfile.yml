# MIT License

# # Copyright (c) 2024 Aaron Saikovski

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# using - https://taskfile.dev/

version: "3"

#ENV VARS
env:
  TARGET: armv.exe #Change this to suit
  APPPATH: .\cmd\armv\main.go #Change this to suit cmd\armv\main.go
  ENV: dev

dotenv: ["./envs/{{.ENV}}.env"]

tasks:
  ## version - get the app version
  version:
    desc: "Get the app version."
    cmds:
      - go run $APPPATH --version

  ## release - Builds the project in preparation for (local)release
  release:
    desc: "Builds the project in preparation for (local)release."
    deps: [vet, lint, seccheck]
    cmds:
      - go generate $APPPATH
      - go build -ldflags="-s -w" -o bin/$TARGET $APPPATH
      - #file bin/$TARGET

  ## goreleaser - Builds the project in preparation for release
  goreleaser:
    desc: "Builds a cross platform release using goreleaser."
    cmds:
      - goreleaser release --snapshot --clean

  ## build - Builds the project in preparation for debug
  build:
    desc: "Builds the project in preparation for debug."
    #deps: [clean]
    cmds:
      - go build -o bin/$TARGET $APPPATH
      #- file bin/$TARGET

  ## run - builds and runs the program on the target platform
  run:
    desc: "Builds and runs the program on the target platform."
    cmds:
      - go run $APPPATH

    ## debug - builds and runs the program on the target platform
  debug:
    desc: "Runs a debug version of the application with input parameters from the environment file."
    cmds:
      - go run $APPPATH --SourceSubscriptionId $SOURCESUBSCRIPTIONID --SourceResourceGroup $SOURCERESOURCEGROUP --TargetSubscriptionId $TARGETSUBSCRIPTIONID --TargetResourceGroup $TARGETRESOURCEGROUP --debug

  ## watch - use air server for hot reloading
  watch:
    desc: "Use air server for hot reloading."
    cmds:
      - air

  ## docs - updates the swagger docs
  docs:
    desc: "Updates the swagger docs - For APIs."
    cmds:
      - swag init

  ## clean - Remove the old builds and any debug information
  clean:
    desc: "Removes the old builds and any debug information from the source tree."
    cmds:
      - go clean -cache
      - go clean
      #- rm -rf dist
      #- rm bin/$TARGET

  ## test - executes unit tests
  test:
    desc: "Executes unit tests."
    cmds:
      - go test -v ./test/...

  ## deps - fetches any external dependencies and updates
  deps:
    desc: "Fetches any external dependencies and updates."
    cmds:
      - go mod tidy
      - go mod download
      - go get -u ./...

  ## vet - Vet examines Go source code and reports suspicious constructs
  vet:
    desc: "Vet examines Go source code and reports suspicious constructs."
    cmds:
      - go vet ./...

  ## staticcheck - Runs static code analyzer staticcheck
  staticcheck:
    desc: "Runs static code analyzer staticcheck."
    cmds:
      - staticcheck ./...

    ## seccheck - Code vulnerability check
  seccheck:
    desc: "Code vulnerability scanner check."
    cmds:
      - govulncheck ./...

  ## lint - format code and tidy modules
  lint:
    desc: "Lint, format and tidy code."
    cmds:
      - go fmt ./...
      - go mod tidy -v
      - golangci-lint run ./...

  ## generate - update build version
  generate:
    desc: "update binary build version using gogenerate."
    cmds:
      - go generate $APPPATH

  ## deploy - deploy azure stack
  deploy:
    desc: "Deploy Azure resources using Bicep for testing."
    cmds:
      - bash ./bicep/deploy.sh

  ## destroy - destroy azure stack
  destroy:
    desc: "Destroy Azure resources for testing."
    cmds:
      - bash ./bicep/destroy.sh
